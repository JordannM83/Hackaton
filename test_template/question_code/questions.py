questions = [
    # 1. Notions de base
    "Que signifie le mot-clé `int` ?",
    "À quoi sert `#include <stdio.h>` ?",
    "Comment déclare-t-on une variable entière en C ?",
    "Quelle est la différence entre `=` et `==` en C ?",
    "Quelle est la syntaxe correcte pour une boucle `for` ?",
    "Que fait l'instruction `return 0;` dans `main()` ?",
    "À quoi sert la fonction `printf()` ?",
    "Quelle est la différence entre `float` et `double` ?",
    "Comment écrire un commentaire sur une seule ligne ?",
    "Qu'est-ce que le `main()` dans un programme C ?",

    # 2. Structures de contrôle
    "Que fait une instruction `if` ?",
    "Comment fonctionne la structure `switch` ?",
    "Quelle est la différence entre `while` et `do...while` ?",
    "Que signifie `break` dans une boucle ?",
    "Que fait l'instruction `continue` ?",
    "Peut-on imbriquer des `if` dans des `if` ?",
    "Quelle est la syntaxe correcte pour un `if else` ?",
    "À quoi sert l'opérateur ternaire `? :` ?",
    "Comment faire une boucle infinie en C ?",
    "Peut-on utiliser `goto` en C ? Si oui, comment ?",

    # 3. Tableaux et chaînes
    "Comment déclare-t-on un tableau d'entiers ?",
    "Que vaut `arr[3]` si `int arr[5] = {1, 2, 3, 4, 5};` ?",
    "Quelle est la différence entre un tableau et un pointeur ?",
    "Comment copier une chaîne de caractères ?",
    "Quelle bibliothèque contient `strlen()` ?",
    "Que fait `strcmp()` ?",
    "Comment concaténer deux chaînes ?",
    "Quelle est la valeur de fin d'une chaîne en C ?",
    "Peut-on modifier une chaîne `char *str = \"Hello\";` ?",
    "Quelle est la différence entre `char str[] = \"abc\";` et `char *str = \"abc\";` ?",

    # 4. Fonctions
    "Comment déclare-t-on une fonction qui retourne un `int` ?",
    "À quoi sert une fonction ?",
    "Que signifie `void` dans une fonction ?",
    "Quelle est la portée d'une variable déclarée dans une fonction ?",
    "Peut-on appeler une fonction avant sa définition ?",
    "Comment passer un tableau à une fonction ?",
    "Quelle est la différence entre passer un paramètre par valeur et par adresse ?",
    "Peut-on avoir des fonctions récursives ?",
    "Que retourne une fonction qui ne contient pas d'instruction `return` ?",
    "Peut-on surcharger une fonction en C ?",

    # 5. Pointeurs
    "Qu'est-ce qu'un pointeur ?",
    "Que fait l'opérateur `*` ?",
    "Quelle est la différence entre `*ptr` et `&var` ?",
    "Comment allouer dynamiquement de la mémoire ?",
    "À quoi sert `malloc()` ?",
    "Que fait `free()` ?",
    "Quelle est la différence entre `malloc()` et `calloc()` ?",
    "Peut-on avoir des pointeurs vers des fonctions ?",
    "Qu'est-ce qu'un pointeur null ?",
    "Comment manipuler un tableau avec des pointeurs ?",

    # 6. Fichiers
    "Comment ouvrir un fichier en C ?",
    "Que fait `fopen()` ?",
    "Quelle est la différence entre `r`, `w`, `a` dans `fopen()` ?",
    "À quoi sert `fclose()` ?",
    "Comment lire une ligne dans un fichier ?",
    "Que fait `fprintf()` ?",
    "Quelle est la différence entre `fprintf()` et `fputs()` ?",
    "Comment vérifier si un fichier est ouvert correctement ?",
    "Peut-on écrire dans un fichier ouvert en lecture seule ?",
    "Comment repositionner le curseur dans un fichier ?",

    # 7. Structures et typedef
    "Qu'est-ce qu'une structure ?",
    "Comment déclare-t-on une structure ?",
    "Quelle est la différence entre `struct` et `typedef struct` ?",
    "Peut-on avoir des pointeurs vers des structures ?",
    "Peut-on imbriquer des structures ?",
    "Comment passer une structure à une fonction ?",
    "Que fait le mot-clé `typedef` ?",
    "Peut-on avoir un tableau de structures ?",
    "Quelle est la syntaxe pour accéder à un champ d'une structure via pointeur ?",
    "Comment initialiser une structure ?",

    # 8. Compilation et erreurs
    "Qu'est-ce qu'un compilateur C ?",
    "Quelle est la commande pour compiler un fichier C avec GCC ?",
    "Que signifie une erreur de segmentation ?",
    "Quelle est la différence entre une erreur de compilation et d'exécution ?",
    "Que fait le flag `-Wall` avec `gcc` ?",
    "Comment générer un exécutable nommé `app` avec `gcc` ?",
    "Que signifie un avertissement \"unused variable\" ?",
    "À quoi sert le `makefile` ?",
    "Quelle est la différence entre `.c` et `.h` ?",
    "Que se passe-t-il si on oublie un point-virgule en C ?",

    # 9. Arithmétique et logique
    "Que fait l'opérateur `%` ?",
    "Quelle est la priorité entre `+` et `*` ?",
    "Que retourne une expression booléenne en C ?",
    "Quelle est la valeur de `true` en C ?",
    "Comment faire une opération bit à bit ?",
    "Quelle est la différence entre `&&` et `&` ?",
    "Comment inverser un bit ?",
    "Que fait l'opérateur `>>` ?",
    "Quelle est la taille d'un `int` en général ?",
    "Peut-on utiliser des opérateurs logiques sur des flottants ?",

    # 10. Concepts avancés
    "Peut-on faire de l'allocation dynamique de tableau 2D ?",
    "Qu'est-ce qu'un `enum` ?",
    "Peut-on modifier le contenu d'une constante via un pointeur ?",
    "Que sont les macros en C ?",
    "Que fait `#define` ?",
    "Quelle est la portée d'une variable `static` ?",
    "Qu'est-ce qu'un `extern` ?",
    "Peut-on avoir plusieurs fichiers `.c` dans un projet C ?",
    "Quelle est la différence entre `const` et `#define` ?",
    "Peut-on faire de l'objet en langage C ?",
]
