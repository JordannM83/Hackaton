# Questions pour le quiz C
questions = [
    # 1. Notions de base
    "Que signifie le mot-clé `int` ?",
    "À quoi sert `#include <stdio.h>` ?",
    "Comment déclare-t-on une variable entière en C ?",
    "Quelle est la différence entre `=` et `==` en C ?",
    "Quelle est la syntaxe correcte pour une boucle `for` ?",
    "Que fait l'instruction `return 0;` dans `main()` ?",
    "À quoi sert la fonction `printf()` ?",
    "Quelle est la différence entre `float` et `double` ?",
    "Comment écrire un commentaire sur une seule ligne ?",
    "Qu'est-ce que le `main()` dans un programme C ?",

    # 2. Structures de contrôle
    "Que fait une instruction `if` ?",
    "Comment fonctionne la structure `switch` ?",
    "Quelle est la différence entre `while` et `do...while` ?",
    "Que signifie `break` dans une boucle ?",
    "Que fait l'instruction `continue` ?",
    "Peut-on imbriquer des `if` dans des `if` ?",
    "Quelle est la syntaxe correcte pour un `if else` ?",
    "À quoi sert l'opérateur ternaire `? :` ?",
    "Comment faire une boucle infinie en C ?",
    "Peut-on utiliser `goto` en C ? Si oui, comment ?",

    # 3. Tableaux et chaînes
    "Comment déclare-t-on un tableau d'entiers ?",
    "Que vaut `arr[3]` si `int arr[5] = {1, 2, 3, 4, 5};` ?",
    "Quelle est la différence entre un tableau et un pointeur ?",
    "Comment copier une chaîne de caractères ?",
    "Quelle bibliothèque contient `strlen()` ?",
    "Que fait `strcmp()` ?",
    "Comment concaténer deux chaînes ?",
    "Quelle est la valeur de fin d'une chaîne en C ?",
    "Peut-on modifier une chaîne `char *str = \"Hello\";` ?",
    "Quelle est la différence entre `char str[] = \"abc\";` et `char *str = \"abc\";` ?",

    # 4. Fonctions
    "Comment déclare-t-on une fonction qui retourne un `int` ?",
    "À quoi sert une fonction ?",
    "Que signifie `void` dans une fonction ?",
    "Quelle est la portée d'une variable déclarée dans une fonction ?",
    "Peut-on appeler une fonction avant sa définition ?",
    "Comment passer un tableau à une fonction ?",
    "Quelle est la différence entre passer un paramètre par valeur et par adresse ?",
    "Peut-on avoir des fonctions récursives ?",
    "Que retourne une fonction qui ne contient pas d'instruction `return` ?",
    "Peut-on surcharger une fonction en C ?",

    # 5. Pointeurs
    "Qu'est-ce qu'un pointeur ?",
    "Que fait l'opérateur `*` ?",
    "Quelle est la différence entre `*ptr` et `&var` ?",
    "Comment allouer dynamiquement de la mémoire ?",
    "À quoi sert `malloc()` ?",
    "Que fait `free()` ?",
    "Quelle est la différence entre `malloc()` et `calloc()` ?",
    "Peut-on avoir des pointeurs vers des fonctions ?",
    "Qu'est-ce qu'un pointeur null ?",
    "Comment manipuler un tableau avec des pointeurs ?",

    # 6. Fichiers
    "Comment ouvrir un fichier en C ?",
    "Que fait `fopen()` ?",
    "Quelle est la différence entre `r`, `w`, `a` dans `fopen()` ?",
    "À quoi sert `fclose()` ?",
    "Comment lire une ligne dans un fichier ?",
    "Que fait `fprintf()` ?",
    "Quelle est la différence entre `fprintf()` et `fputs()` ?",
    "Comment vérifier si un fichier est ouvert correctement ?",
    "Peut-on écrire dans un fichier ouvert en lecture seule ?",
    "Comment repositionner le curseur dans un fichier ?",

    # 7. Structures et typedef
    "Qu'est-ce qu'une structure ?",
    "Comment déclare-t-on une structure ?",
    "Quelle est la différence entre `struct` et `typedef struct` ?",
    "Peut-on avoir des pointeurs vers des structures ?",
    "Peut-on imbriquer des structures ?",
    "Comment passer une structure à une fonction ?",
    "Que fait le mot-clé `typedef` ?",
    "Peut-on avoir un tableau de structures ?",
    "Quelle est la syntaxe pour accéder à un champ d'une structure via pointeur ?",
    "Comment initialiser une structure ?",

    # 8. Compilation et erreurs
    "Qu'est-ce qu'un compilateur C ?",
    "Quelle est la commande pour compiler un fichier C avec GCC ?",
    "Que signifie une erreur de segmentation ?",
    "Quelle est la différence entre une erreur de compilation et d'exécution ?",
    "Que fait le flag `-Wall` avec `gcc` ?",
    "Comment générer un exécutable nommé `app` avec `gcc` ?",
    "Que signifie un avertissement \"unused variable\" ?",
    "À quoi sert le `makefile` ?",
    "Quelle est la différence entre `.c` et `.h` ?",
    "Que se passe-t-il si on oublie un point-virgule en C ?",

    # 9. Arithmétique et logique
    "Que fait l'opérateur `%` ?",
    "Quelle est la priorité entre `+` et `*` ?",
    "Que retourne une expression booléenne en C ?",
    "Quelle est la valeur de `true` en C ?",
    "Comment faire une opération bit à bit ?",
    "Quelle est la différence entre `&&` et `&` ?",
    "Comment inverser un bit ?",
    "Que fait l'opérateur `>>` ?",
    "Quelle est la taille d'un `int` en général ?",
    "Peut-on utiliser des opérateurs logiques sur des flottants ?",

    # 10. Concepts avancés
    "Peut-on faire de l'allocation dynamique de tableau 2D ?",
    "Qu'est-ce qu'un `enum` ?",
    "Peut-on modifier le contenu d'une constante via un pointeur ?",
    "Que sont les macros en C ?",
    "Que fait `#define` ?",
    "Quelle est la portée d'une variable `static` ?",
    "Qu'est-ce qu'un `extern` ?",
    "Peut-on avoir plusieurs fichiers `.c` dans un projet C ?",
    "Quelle est la différence entre `const` et `#define` ?",
    "Peut-on faire de l'objet en langage C ?",
]

# Réponses correspondantes
answers = [
    # 1. Notions de base
    "Le mot-clé `int` déclare une variable de type entier (integer).",
    "`#include <stdio.h>` inclut la bibliothèque standard d'entrée/sortie pour utiliser printf, scanf, etc.",
    "On déclare une variable entière avec : `int nom_variable;` ou `int nom_variable = valeur;`",
    "`=` est l'opérateur d'affectation, `==` est l'opérateur de comparaison d'égalité.",
    "La syntaxe est : `for(initialisation; condition; incrémentation) { instructions; }`",
    "`return 0;` indique que le programme s'est terminé avec succès (code de retour 0).",
    "`printf()` affiche du texte formaté sur la sortie standard (écran).",
    "`float` est codé sur 32 bits (précision simple), `double` sur 64 bits (précision double).",
    "Un commentaire sur une ligne s'écrit avec `//` suivi du texte.",
    "`main()` est la fonction principale, point d'entrée du programme C.",

    # 2. Structures de contrôle
    "`if` exécute un bloc d'instructions si une condition est vraie.",
    "`switch` permet de comparer une variable à plusieurs valeurs et exécuter le code correspondant.",
    "`while` teste la condition avant l'exécution, `do...while` teste après (au moins une exécution).",
    "`break` sort immédiatement de la boucle ou du switch en cours.",
    "`continue` passe directement à l'itération suivante de la boucle.",
    "Oui, on peut imbriquer des `if` : `if(condition1) { if(condition2) { ... } }`",
    "Syntaxe : `if(condition) { ... } else { ... }`",
    "L'opérateur ternaire `condition ? valeur_si_vrai : valeur_si_faux` est un if condensé.",
    "Boucle infinie : `for(;;)` ou `while(1)` ou `while(true)`",
    "Oui, `goto` existe mais est déconseillé : `goto etiquette;` puis `etiquette:`",

    # 3. Tableaux et chaînes
    "Déclaration : `int tableau[taille];` ou `int tableau[] = {val1, val2, ...};`",
    "`arr[3]` vaut 4 (les indices commencent à 0, donc arr[3] est le 4ème élément).",
    "Un tableau est un nom fixe en mémoire, un pointeur est une variable contenant une adresse.",
    "Avec `strcpy(destination, source);` de la bibliothèque string.h",
    "`strlen()` est dans la bibliothèque `string.h`",
    "`strcmp()` compare deux chaînes et retourne 0 si elles sont identiques.",
    "Avec `strcat(destination, source);` pour concaténer source à destination.",
    "Une chaîne se termine par le caractère nul `'\\0'`",
    "Non, car elle est stockée dans une zone mémoire en lecture seule.",
    "`char str[]` crée un tableau modifiable, `char *str` pointe vers une chaîne constante.",

    # 4. Fonctions
    "Syntaxe : `int nom_fonction(paramètres) { ... return valeur; }`",
    "Une fonction permet de regrouper du code réutilisable et d'organiser le programme.",
    "`void` signifie que la fonction ne retourne rien.",
    "Une variable dans une fonction a une portée locale (visible uniquement dans cette fonction).",
    "Oui, avec un prototype : `int fonction(int param);` avant la définition.",
    "On passe le nom du tableau : `fonction(tableau)` ou `fonction(&tableau[0])`",
    "Par valeur : copie la valeur. Par adresse : passe l'adresse (permet modification).",
    "Oui, une fonction peut s'appeler elle-même (récursivité).",
    "Elle retourne une valeur indéterminée (comportement non défini).",
    "Non, C ne supporte pas la surcharge de fonctions.",

    # 5. Pointeurs
    "Un pointeur est une variable qui stocke l'adresse mémoire d'une autre variable.",
    "`*` est l'opérateur de déréférencement (accès à la valeur pointée).",
    "`*ptr` accède à la valeur pointée, `&var` obtient l'adresse de var.",
    "Avec `malloc()`, `calloc()` ou `realloc()` de stdlib.h",
    "`malloc()` alloue un bloc de mémoire de taille donnée.",
    "`free()` libère la mémoire précédemment allouée dynamiquement.",
    "`malloc()` n'initialise pas, `calloc()` initialise à zéro et prend nombre×taille.",
    "Oui : `int (*ptr_func)(int) = &ma_fonction;`",
    "Un pointeur null (NULL) ne pointe vers aucune adresse valide.",
    "En utilisant l'arithmétique des pointeurs : `*(ptr + i)` équivaut à `tableau[i]`",

    # 6. Fichiers
    "Avec la fonction `fopen(\"nom_fichier\", \"mode\")`",
    "`fopen()` ouvre un fichier et retourne un pointeur FILE*",
    "`r` = lecture, `w` = écriture (écrase), `a` = ajout (append)",
    "`fclose()` ferme le fichier et libère les ressources associées.",
    "Avec `fgets(buffer, taille, fichier)` ou `fscanf()`",
    "`fprintf()` écrit du texte formaté dans un fichier.",
    "`fprintf()` permet le formatage, `fputs()` écrit une chaîne simple.",
    "En vérifiant si `fopen()` retourne NULL : `if(fichier == NULL)`",
    "Non, cela provoquera une erreur.",
    "Avec `fseek(fichier, position, origine)` ou `rewind(fichier)`",

    # 7. Structures et typedef
    "Une structure regroupe plusieurs variables de types différents sous un nom.",
    "`struct nom { type1 champ1; type2 champ2; };`",
    "`struct` nécessite le mot-clé struct, `typedef struct` créé un alias.",
    "Oui : `struct nom *ptr;` puis `ptr->champ` ou `(*ptr).champ`",
    "Oui, une structure peut contenir d'autres structures.",
    "Par valeur (copie) ou par pointeur (référence).",
    "`typedef` créé un alias pour un type existant.",
    "Oui : `struct nom tableau[taille];`",
    "Avec l'opérateur flèche : `ptr->champ`",
    "`struct nom var = {val1, val2, ...};` ou champ par champ.",

    # 8. Compilation et erreurs
    "Un compilateur traduit le code C en code machine exécutable.",
    "`gcc nom_fichier.c` ou `gcc nom_fichier.c -o nom_executable`",
    "Erreur d'accès à une zone mémoire non autorisée.",
    "Compilation : erreur de syntaxe. Exécution : erreur pendant l'exécution.",
    "`-Wall` active tous les avertissements courants.",
    "`gcc fichier.c -o app`",
    "Variable déclarée mais jamais utilisée.",
    "Un makefile automatise la compilation de projets complexes.",
    "`.c` contient le code source, `.h` contient les déclarations (headers).",
    "Erreur de compilation : 'expected ;'",

    # 9. Arithmétique et logique
    "`%` est l'opérateur modulo (reste de la division entière).",
    "`*` a une priorité plus élevée que `+`",
    "0 pour faux, toute valeur non-nulle pour vrai.",
    "Il n'y a pas de `true` en C standard, on utilise 1 ou toute valeur non-nulle.",
    "Avec les opérateurs `&`, `|`, `^`, `~`, `<<`, `>>`",
    "`&&` est l'ET logique, `&` est l'ET bit à bit.",
    "Avec l'opérateur `~` : `~bit`",
    "`>>` est le décalage à droite bit à bit.",
    "Généralement 32 bits (4 octets) sur les systèmes modernes.",
    "Oui, mais 0.0 est faux, toute autre valeur est vraie.",

    # 10. Concepts avancés
    "Oui, avec des pointeurs vers pointeurs : `int **matrice`",
    "`enum` définit des constantes entières nommées.",
    "Techniquement oui avec un cast, mais c'est un comportement indéfini.",
    "Les macros sont des remplacements de texte effectués par le préprocesseur.",
    "`#define` définit une macro (remplacement de texte).",
    "`static` limite la portée au fichier ou garde la valeur entre appels.",
    "`extern` déclare une variable définie dans un autre fichier.",
    "Oui, on peut compiler plusieurs fichiers .c ensemble.",
    "`const` vérifie à l'exécution, `#define` remplace à la compilation.",
    "Partiellement, avec des structures et pointeurs de fonctions.",
]

# Catégories de questions
categories = {
    "Notions de base": list(range(0, 10)),
    "Structures de contrôle": list(range(10, 20)),
    "Tableaux et chaînes": list(range(20, 30)),
    "Fonctions": list(range(30, 40)),
    "Pointeurs": list(range(40, 50)),
    "Fichiers": list(range(50, 60)),
    "Structures et typedef": list(range(60, 70)),
    "Compilation et erreurs": list(range(70, 80)),
    "Arithmétique et logique": list(range(80, 90)),
    "Concepts avancés": list(range(90, 100))
}
