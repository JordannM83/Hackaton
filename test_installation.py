#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'installation de Holbies Learning Hub
"""

import sys
import os
import requests
import time
import subprocess
import signal
from multiprocessing import Process

def test_imports():
    """Test les imports Python n√©cessaires"""
    print("üîç Test des imports Python...")
    
    try:
        import fastapi
        print("‚úÖ FastAPI import√© avec succ√®s")
        
        import sqlalchemy
        print("‚úÖ SQLAlchemy import√© avec succ√®s")
        
        import psycopg2
        print("‚úÖ psycopg2 import√© avec succ√®s")
        
        import uvicorn
        print("‚úÖ Uvicorn import√© avec succ√®s")
        
        import jose
        print("‚úÖ python-jose import√© avec succ√®s")
        
        import passlib
        print("‚úÖ passlib import√© avec succ√®s")
        
        return True
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False

def test_database_connection():
    """Test la connexion √† la base de donn√©es"""
    print("\nüîç Test de la connexion √† la base de donn√©es...")
    
    try:
        from app.database import engine
        from sqlalchemy import text
        
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            print("‚úÖ Connexion √† la base de donn√©es r√©ussie")
            return True
    except Exception as e:
        print(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
        return False

def test_models():
    """Test les mod√®les de base de donn√©es"""
    print("\nüîç Test des mod√®les de base de donn√©es...")
    
    try:
        from app.models import User, Question, QuizSession, QuizAnswer
        print("‚úÖ Tous les mod√®les import√©s avec succ√®s")
        
        from app.database import SessionLocal
        db = SessionLocal()
        
        # Test si les tables existent
        user_count = db.query(User).count()
        question_count = db.query(Question).count()
        
        print(f"‚úÖ {user_count} utilisateurs dans la base")
        print(f"‚úÖ {question_count} questions dans la base")
        
        db.close()
        return True
    except Exception as e:
        print(f"‚ùå Erreur avec les mod√®les: {e}")
        return False

def start_server():
    """D√©marre le serveur en arri√®re-plan"""
    import uvicorn
    from main import app
    
    uvicorn.run(app, host="127.0.0.1", port=8001, log_level="error")

def test_server():
    """Test le serveur web"""
    print("\nüîç Test du serveur web...")
    
    # D√©marrer le serveur en arri√®re-plan
    server_process = Process(target=start_server)
    server_process.start()
    
    # Attendre que le serveur d√©marre
    time.sleep(3)
    
    try:
        # Test de la page d'accueil
        response = requests.get("http://127.0.0.1:8001/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Page d'accueil accessible")
        else:
            print(f"‚ùå Page d'accueil retourne: {response.status_code}")
            return False
        
        # Test de l'API docs
        response = requests.get("http://127.0.0.1:8001/docs", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Documentation API accessible")
        else:
            print(f"‚ùå Documentation API retourne: {response.status_code}")
        
        # Test d'une route API
        response = requests.get("http://127.0.0.1:8001/api/quiz/questions?limit=1", timeout=5)
        if response.status_code == 401:  # Unauthorized (normal sans token)
            print("‚úÖ API fonctionnelle (authentification requise)")
        else:
            print(f"‚ÑπÔ∏è API retourne: {response.status_code}")
        
        server_process.terminate()
        server_process.join()
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion au serveur: {e}")
        server_process.terminate()
        server_process.join()
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test du serveur: {e}")
        server_process.terminate()
        server_process.join()
        return False

def test_static_files():
    """Test l'existence des fichiers statiques"""
    print("\nüîç Test des fichiers statiques...")
    
    static_files = [
        "static/css/style.css",
        "static/js/main.js",
        "static/js/auth.js",
        "static/js/quiz.js",
        "static/js/dashboard.js"
    ]
    
    all_exist = True
    for file_path in static_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} manquant")
            all_exist = False
    
    return all_exist

def test_templates():
    """Test l'existence des templates"""
    print("\nüîç Test des templates...")
    
    template_files = [
        "templates/base.html",
        "templates/index.html",
        "templates/login.html",
        "templates/register.html",
        "templates/quiz.html",
        "templates/dashboard.html"
    ]
    
    all_exist = True
    for file_path in template_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} manquant")
            all_exist = False
    
    return all_exist

def run_all_tests():
    """Lance tous les tests"""
    print("üß™ TESTS DE L'INSTALLATION HOLBIES LEARNING HUB")
    print("=" * 60)
    
    tests = [
        ("Imports Python", test_imports),
        ("Connexion base de donn√©es", test_database_connection),
        ("Mod√®les de donn√©es", test_models),
        ("Fichiers statiques", test_static_files),
        ("Templates HTML", test_templates),
        ("Serveur web", test_server)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur lors du test '{test_name}': {e}")
            results.append((test_name, False))
    
    # R√©sum√© des r√©sultats
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHEC"
        print(f"{test_name:<30} {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ R√©sultat final: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("\nüéâ Tous les tests sont pass√©s! L'installation est compl√®te.")
        print("\nüí° Pour d√©marrer l'application:")
        print("   ./start.sh")
        print("\nüåê Ou manuellement:")
        print("   uvicorn main:app --reload --host 0.0.0.0 --port 8000")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} test(s) ont √©chou√©.")
        print("Consultez les messages d'erreur ci-dessus pour r√©soudre les probl√®mes.")
    
    return passed == total

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
